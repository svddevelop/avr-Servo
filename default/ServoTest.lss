
ServoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000b  00800060  00800060  0000036e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000044  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b8  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000105  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000023d  00000000  00000000  0000068f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000db  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	af c0       	rjmp	.+350    	; 0x170 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ab 36       	cpi	r26, 0x6B	; 107
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	19 d0       	rcall	.+50     	; 0x76 <main>
  44:	58 c1       	rjmp	.+688    	; 0x2f6 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <uart_putc>:
static opt_t opt;
static 	char ch;


void uart_putc( char c )
{
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	0f 92       	push	r0
  4e:	cd b7       	in	r28, 0x3d	; 61
  50:	de b7       	in	r29, 0x3e	; 62
  52:	89 83       	std	Y+1, r24	; 0x01
  while( ( UCSRA & ( 1 << UDRE ) ) == 0  );
  54:	eb e2       	ldi	r30, 0x2B	; 43
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	88 2f       	mov	r24, r24
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	80 72       	andi	r24, 0x20	; 32
  60:	90 70       	andi	r25, 0x00	; 0
  62:	00 97       	sbiw	r24, 0x00	; 0
  64:	b9 f3       	breq	.-18     	; 0x54 <uart_putc+0xc>
  UDR = c;
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	89 81       	ldd	r24, Y+1	; 0x01
  6c:	80 83       	st	Z, r24
}
  6e:	0f 90       	pop	r0
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	08 95       	ret

00000076 <main>:

int main(void) {
  76:	df 93       	push	r29
  78:	cf 93       	push	r28
  7a:	cd b7       	in	r28, 0x3d	; 61
  7c:	de b7       	in	r29, 0x3e	; 62
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART Receiver: On
	// USART Transmitter: On
	// USART Mode: Asynchronous
	// USART Baud Rate: 9600
	UCSRA=0x00;
  7e:	eb e2       	ldi	r30, 0x2B	; 43
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	10 82       	st	Z, r1
    UCSRC = ( 1 << URSEL ) | ( 1 << UCSZ1 ) | ( 1 << UCSZ0 );
  84:	e0 e4       	ldi	r30, 0x40	; 64
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 83       	st	Z, r24
  	UCSRB = ( 1 << TXEN ) | ( 1 <<RXEN );
  8c:	ea e2       	ldi	r30, 0x2A	; 42
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	80 83       	st	Z, r24
	UBRRH=0x00;
  94:	e0 e4       	ldi	r30, 0x40	; 64
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	10 82       	st	Z, r1
	UBRRL=0x33;
  9a:	e9 e2       	ldi	r30, 0x29	; 41
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	83 e3       	ldi	r24, 0x33	; 51
  a0:	80 83       	st	Z, r24
	//*

	uart_putc('>');
  a2:	8e e3       	ldi	r24, 0x3E	; 62
  a4:	d1 df       	rcall	.-94     	; 0x48 <uart_putc>
	//Init timer
	//http://mainloop.ru/avr-atmega/avr-timer-counter.html
  	TCCR1B = (0<<CS12)|(0<<CS11)|(1<<CS10); // 
  a6:	ee e4       	ldi	r30, 0x4E	; 78
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	80 83       	st	Z, r24
	//#define _T_OFFSET	(_T_CALLER/25707)
	#define _T_OFFSET  0x0;
  	TIMSK |= (1<<TOIE1); // 
  ae:	a9 e5       	ldi	r26, 0x59	; 89
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e9 e5       	ldi	r30, 0x59	; 89
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	8c 93       	st	X, r24
  	TCNT1 = _T_OFFSET;        // offset of counter
  bc:	ec e4       	ldi	r30, 0x4C	; 76
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	11 82       	std	Z+1, r1	; 0x01
  c2:	10 82       	st	Z, r1
	
	//*

	//INIT
	DDRB = 0xFF;
  c4:	e7 e3       	ldi	r30, 0x37	; 55
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	80 83       	st	Z, r24
	DDRC = 0xFF;
  cc:	e4 e3       	ldi	r30, 0x34	; 52
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	80 83       	st	Z, r24
	servos[0].idx = (1 << PB0);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 63 00 	sts	0x0063, r24
	servos[0].angle = 9;
  da:	89 e0       	ldi	r24, 0x09	; 9
  dc:	80 93 64 00 	sts	0x0064, r24
	servos[0].process = 9;
  e0:	89 e0       	ldi	r24, 0x09	; 9
  e2:	80 93 65 00 	sts	0x0065, r24

	servos[1].idx = (1 << PB1);
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	80 93 66 00 	sts	0x0066, r24
	servos[1].angle = 12;
  ec:	8c e0       	ldi	r24, 0x0C	; 12
  ee:	80 93 67 00 	sts	0x0067, r24
	servos[1].process = 12;
  f2:	8c e0       	ldi	r24, 0x0C	; 12
  f4:	80 93 68 00 	sts	0x0068, r24
	//*



  	sei();                // ?????????? ??? ?????? ?????????? ??????????
  f8:	78 94       	sei



	opt.received = 0;
  fa:	80 91 69 00 	lds	r24, 0x0069
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	80 93 69 00 	sts	0x0069, r24

	while(1){

		if ( UCSRA &_BV(RXC)   ){
 104:	eb e2       	ldi	r30, 0x2B	; 43
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	88 23       	and	r24, r24
 10c:	6c f4       	brge	.+26     	; 0x128 <main+0xb2>
			ch = UDR;
 10e:	ec e2       	ldi	r30, 0x2C	; 44
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 93 6a 00 	sts	0x006A, r24
			uart_putc(ch);
 118:	80 91 6a 00 	lds	r24, 0x006A
 11c:	95 df       	rcall	.-214    	; 0x48 <uart_putc>
			opt.received = 1;
 11e:	80 91 69 00 	lds	r24, 0x0069
 122:	81 60       	ori	r24, 0x01	; 1
 124:	80 93 69 00 	sts	0x0069, r24
		}

		if (opt.received == 1){
 128:	80 91 69 00 	lds	r24, 0x0069
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	88 23       	and	r24, r24
 130:	49 f3       	breq	.-46     	; 0x104 <main+0x8e>

			if (ch == '+')
 132:	80 91 6a 00 	lds	r24, 0x006A
 136:	8b 32       	cpi	r24, 0x2B	; 43
 138:	29 f4       	brne	.+10     	; 0x144 <main+0xce>
				servos[0].angle += 10;
 13a:	80 91 64 00 	lds	r24, 0x0064
 13e:	86 5f       	subi	r24, 0xF6	; 246
 140:	80 93 64 00 	sts	0x0064, r24
			if (ch == '-')
 144:	80 91 6a 00 	lds	r24, 0x006A
 148:	8d 32       	cpi	r24, 0x2D	; 45
 14a:	29 f4       	brne	.+10     	; 0x156 <main+0xe0>
				servos[0].angle -= 10;
 14c:	80 91 64 00 	lds	r24, 0x0064
 150:	8a 50       	subi	r24, 0x0A	; 10
 152:	80 93 64 00 	sts	0x0064, r24
			uart_putc(ch);
 156:	80 91 6a 00 	lds	r24, 0x006A
 15a:	76 df       	rcall	.-276    	; 0x48 <uart_putc>
			uart_putc(13);
 15c:	8d e0       	ldi	r24, 0x0D	; 13
 15e:	74 df       	rcall	.-280    	; 0x48 <uart_putc>
			uart_putc(10);
 160:	8a e0       	ldi	r24, 0x0A	; 10
 162:	72 df       	rcall	.-284    	; 0x48 <uart_putc>
			opt.received = 0;
 164:	80 91 69 00 	lds	r24, 0x0069
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	80 93 69 00 	sts	0x0069, r24
 16e:	ca cf       	rjmp	.-108    	; 0x104 <main+0x8e>

00000170 <__vector_8>:
}

static uint8_t port = 0;

ISR( TIMER1_OVF_vect )
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
 18a:	df 93       	push	r29
 18c:	cf 93       	push	r28
 18e:	0f 92       	push	r0
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
	PORTC = 1 & counter;
 194:	e5 e3       	ldi	r30, 0x35	; 53
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 91 60 00 	lds	r24, 0x0060
 19c:	90 91 61 00 	lds	r25, 0x0061
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	80 83       	st	Z, r24
	TCNT1 = _T_OFFSET;// offset for correctiong of ours frequence
 1a4:	ec e4       	ldi	r30, 0x4C	; 76
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	11 82       	std	Z+1, r1	; 0x01
 1aa:	10 82       	st	Z, r1
	
	counter++;
 1ac:	80 91 60 00 	lds	r24, 0x0060
 1b0:	90 91 61 00 	lds	r25, 0x0061
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 61 00 	sts	0x0061, r25
 1ba:	80 93 60 00 	sts	0x0060, r24
			}
		}
	}*/

	// Variant 2:
	port = 0;
 1be:	10 92 62 00 	sts	0x0062, r1
	for(i=0; i<_SERVO_CNT; i++){
 1c2:	19 82       	std	Y+1, r1	; 0x01
 1c4:	77 c0       	rjmp	.+238    	; 0x2b4 <__vector_8+0x144>
		if (servos[i].process > -servos[i].angle){
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	28 2f       	mov	r18, r24
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	c9 01       	movw	r24, r18
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	82 0f       	add	r24, r18
 1d4:	93 1f       	adc	r25, r19
 1d6:	fc 01       	movw	r30, r24
 1d8:	eb 59       	subi	r30, 0x9B	; 155
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	55 27       	eor	r21, r21
 1e2:	47 fd       	sbrc	r20, 7
 1e4:	50 95       	com	r21
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	28 2f       	mov	r18, r24
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	c9 01       	movw	r24, r18
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	82 0f       	add	r24, r18
 1f4:	93 1f       	adc	r25, r19
 1f6:	fc 01       	movw	r30, r24
 1f8:	ec 59       	subi	r30, 0x9C	; 156
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	80 81       	ld	r24, Z
 1fe:	88 2f       	mov	r24, r24
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	90 95       	com	r25
 204:	81 95       	neg	r24
 206:	9f 4f       	sbci	r25, 0xFF	; 255
 208:	84 17       	cp	r24, r20
 20a:	95 07       	cpc	r25, r21
 20c:	bc f5       	brge	.+110    	; 0x27c <__vector_8+0x10c>

			servos[i].process--;
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	c9 01       	movw	r24, r18
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	82 0f       	add	r24, r18
 21c:	93 1f       	adc	r25, r19
 21e:	fc 01       	movw	r30, r24
 220:	eb 59       	subi	r30, 0x9B	; 155
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	41 50       	subi	r20, 0x01	; 1
 22a:	c9 01       	movw	r24, r18
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	82 0f       	add	r24, r18
 232:	93 1f       	adc	r25, r19
 234:	fc 01       	movw	r30, r24
 236:	eb 59       	subi	r30, 0x9B	; 155
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	40 83       	st	Z, r20
			if (servos[i].process >= 0)
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	28 2f       	mov	r18, r24
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	c9 01       	movw	r24, r18
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	82 0f       	add	r24, r18
 24a:	93 1f       	adc	r25, r19
 24c:	fc 01       	movw	r30, r24
 24e:	eb 59       	subi	r30, 0x9B	; 155
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	80 81       	ld	r24, Z
 254:	88 23       	and	r24, r24
 256:	5c f1       	brlt	.+86     	; 0x2ae <__vector_8+0x13e>
				port |= servos[i].idx;
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	28 2f       	mov	r18, r24
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	c9 01       	movw	r24, r18
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	82 0f       	add	r24, r18
 266:	93 1f       	adc	r25, r19
 268:	fc 01       	movw	r30, r24
 26a:	ed 59       	subi	r30, 0x9D	; 157
 26c:	ff 4f       	sbci	r31, 0xFF	; 255
 26e:	90 81       	ld	r25, Z
 270:	80 91 62 00 	lds	r24, 0x0062
 274:	89 2b       	or	r24, r25
 276:	80 93 62 00 	sts	0x0062, r24
 27a:	19 c0       	rjmp	.+50     	; 0x2ae <__vector_8+0x13e>
		}else{

			servos[i].process = servos[i].angle;
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	48 2f       	mov	r20, r24
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	89 81       	ldd	r24, Y+1	; 0x01
 284:	28 2f       	mov	r18, r24
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	c9 01       	movw	r24, r18
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	82 0f       	add	r24, r18
 290:	93 1f       	adc	r25, r19
 292:	fc 01       	movw	r30, r24
 294:	ec 59       	subi	r30, 0x9C	; 156
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	80 81       	ld	r24, Z
 29a:	28 2f       	mov	r18, r24
 29c:	ca 01       	movw	r24, r20
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	84 0f       	add	r24, r20
 2a4:	95 1f       	adc	r25, r21
 2a6:	fc 01       	movw	r30, r24
 2a8:	eb 59       	subi	r30, 0x9B	; 155
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	20 83       	st	Z, r18
		}
	}*/

	// Variant 2:
	port = 0;
	for(i=0; i<_SERVO_CNT; i++){
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	89 83       	std	Y+1, r24	; 0x01
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	08 f4       	brcc	.+2      	; 0x2bc <__vector_8+0x14c>
 2ba:	85 cf       	rjmp	.-246    	; 0x1c6 <__vector_8+0x56>
		}
	}
	//


	PORTB = port;
 2bc:	e8 e3       	ldi	r30, 0x38	; 56
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 91 62 00 	lds	r24, 0x0062
 2c4:	80 83       	st	Z, r24
	PORTC = 1 & counter;
 2c6:	e5 e3       	ldi	r30, 0x35	; 53
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 91 60 00 	lds	r24, 0x0060
 2ce:	90 91 61 00 	lds	r25, 0x0061
 2d2:	81 70       	andi	r24, 0x01	; 1
 2d4:	80 83       	st	Z, r24
}
 2d6:	0f 90       	pop	r0
 2d8:	cf 91       	pop	r28
 2da:	df 91       	pop	r29
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>


ServoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000052a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000028  00800060  00800060  000005be  2**0
                  ALLOC
  2 .eeprom       00000020  00810000  00810000  000005be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000047  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002a0  00000000  00000000  00000645  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000146  00000000  00000000  000008e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ed  00000000  00000000  00000a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000118  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	34 c2       	rjmp	.+1128   	; 0x476 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 38       	cpi	r26, 0x88	; 136
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	d1 d0       	rcall	.+418    	; 0x1e6 <main>
  44:	70 c2       	rjmp	.+1248   	; 0x526 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <uart_putc>:

#define _START_TCI	TIMSK |= (1 << OCIE1A)
#define _STOP_TCI	TIMSK &= ~(1 << OCIE1A)

void uart_putc( char c )
{
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	0f 92       	push	r0
  4e:	cd b7       	in	r28, 0x3d	; 61
  50:	de b7       	in	r29, 0x3e	; 62
  52:	89 83       	std	Y+1, r24	; 0x01
  while( ( UCSRA & ( 1 << UDRE ) ) == 0  );
  54:	eb e2       	ldi	r30, 0x2B	; 43
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	88 2f       	mov	r24, r24
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	80 72       	andi	r24, 0x20	; 32
  60:	90 70       	andi	r25, 0x00	; 0
  62:	00 97       	sbiw	r24, 0x00	; 0
  64:	b9 f3       	breq	.-18     	; 0x54 <uart_putc+0xc>
  UDR = c;
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	89 81       	ldd	r24, Y+1	; 0x01
  6c:	80 83       	st	Z, r24
}
  6e:	0f 90       	pop	r0
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	08 95       	ret

00000076 <angle2counter>:

static uint16_t angle2counter(uint8_t idx, int8_t angle){
  76:	0f 93       	push	r16
  78:	1f 93       	push	r17
  7a:	df 93       	push	r29
  7c:	cf 93       	push	r28
  7e:	00 d0       	rcall	.+0      	; 0x80 <angle2counter+0xa>
  80:	00 d0       	rcall	.+0      	; 0x82 <angle2counter+0xc>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	8b 83       	std	Y+3, r24	; 0x03
  88:	6c 83       	std	Y+4, r22	; 0x04
  
	uint16_t addr = &eememSet;
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	9a 83       	std	Y+2, r25	; 0x02
  90:	89 83       	std	Y+1, r24	; 0x01
	addr += sizeof(servo_set_t)*idx;
  92:	8b 81       	ldd	r24, Y+3	; 0x03
  94:	88 2f       	mov	r24, r24
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	9c 01       	movw	r18, r24
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	9a 81       	ldd	r25, Y+2	; 0x02
  a6:	82 0f       	add	r24, r18
  a8:	93 1f       	adc	r25, r19
  aa:	9a 83       	std	Y+2, r25	; 0x02
  ac:	89 83       	std	Y+1, r24	; 0x01
	eeprom_read_block ((void *)&tmpSet, addr, sizeof(servo_set_t));
  ae:	29 81       	ldd	r18, Y+1	; 0x01
  b0:	3a 81       	ldd	r19, Y+2	; 0x02
  b2:	82 e6       	ldi	r24, 0x62	; 98
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	b9 01       	movw	r22, r18
  b8:	44 e0       	ldi	r20, 0x04	; 4
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	24 d2       	rcall	.+1096   	; 0x506 <__eerd_block_m8>
	return (tmpSet.cntmin + tmpSet.cntmax)/2 + angle*((tmpSet.cntmax - tmpSet.cntmin)/180);
  be:	20 91 62 00 	lds	r18, 0x0062
  c2:	30 91 63 00 	lds	r19, 0x0063
  c6:	80 91 64 00 	lds	r24, 0x0064
  ca:	90 91 65 00 	lds	r25, 0x0065
  ce:	82 0f       	add	r24, r18
  d0:	93 1f       	adc	r25, r19
  d2:	8c 01       	movw	r16, r24
  d4:	16 95       	lsr	r17
  d6:	07 95       	ror	r16
  d8:	8c 81       	ldd	r24, Y+4	; 0x04
  da:	e8 2f       	mov	r30, r24
  dc:	ff 27       	eor	r31, r31
  de:	e7 fd       	sbrc	r30, 7
  e0:	f0 95       	com	r31
  e2:	20 91 64 00 	lds	r18, 0x0064
  e6:	30 91 65 00 	lds	r19, 0x0065
  ea:	80 91 62 00 	lds	r24, 0x0062
  ee:	90 91 63 00 	lds	r25, 0x0063
  f2:	a9 01       	movw	r20, r18
  f4:	48 1b       	sub	r20, r24
  f6:	59 0b       	sbc	r21, r25
  f8:	ca 01       	movw	r24, r20
  fa:	24 eb       	ldi	r18, 0xB4	; 180
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	b9 01       	movw	r22, r18
 100:	ee d1       	rcall	.+988    	; 0x4de <__udivmodhi4>
 102:	cb 01       	movw	r24, r22
 104:	9c 01       	movw	r18, r24
 106:	e2 9f       	mul	r30, r18
 108:	c0 01       	movw	r24, r0
 10a:	e3 9f       	mul	r30, r19
 10c:	90 0d       	add	r25, r0
 10e:	f2 9f       	mul	r31, r18
 110:	90 0d       	add	r25, r0
 112:	11 24       	eor	r1, r1
 114:	80 0f       	add	r24, r16
 116:	91 1f       	adc	r25, r17
}
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	cf 91       	pop	r28
 122:	df 91       	pop	r29
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <timerStart>:


void timerStart(){
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62

	_STOP_TCI;
 132:	a9 e5       	ldi	r26, 0x59	; 89
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e9 e5       	ldi	r30, 0x59	; 89
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8f 7e       	andi	r24, 0xEF	; 239
 13e:	8c 93       	st	X, r24
	port &= ~(servos[idx++].idx);
 140:	20 91 60 00 	lds	r18, 0x0060
 144:	82 2f       	mov	r24, r18
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	fc 01       	movw	r30, r24
 152:	ea 59       	subi	r30, 0x9A	; 154
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	80 81       	ld	r24, Z
 158:	98 2f       	mov	r25, r24
 15a:	90 95       	com	r25
 15c:	80 91 61 00 	lds	r24, 0x0061
 160:	89 23       	and	r24, r25
 162:	80 93 61 00 	sts	0x0061, r24
 166:	82 2f       	mov	r24, r18
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 60 00 	sts	0x0060, r24
	if (idx >= _SERVO_CNT) idx = 0;
 16e:	80 91 60 00 	lds	r24, 0x0060
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	10 f0       	brcs	.+4      	; 0x17a <timerStart+0x50>
 176:	10 92 60 00 	sts	0x0060, r1
	port |= (servos[idx].idx);
 17a:	80 91 60 00 	lds	r24, 0x0060
 17e:	88 2f       	mov	r24, r24
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	fc 01       	movw	r30, r24
 18c:	ea 59       	subi	r30, 0x9A	; 154
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	90 81       	ld	r25, Z
 192:	80 91 61 00 	lds	r24, 0x0061
 196:	89 2b       	or	r24, r25
 198:	80 93 61 00 	sts	0x0061, r24

	OCR1A = servos[idx].counter;
 19c:	aa e4       	ldi	r26, 0x4A	; 74
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	80 91 60 00 	lds	r24, 0x0060
 1a4:	88 2f       	mov	r24, r24
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	fc 01       	movw	r30, r24
 1b2:	e9 59       	subi	r30, 0x99	; 153
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	80 81       	ld	r24, Z
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	11 96       	adiw	r26, 0x01	; 1
 1bc:	9c 93       	st	X, r25
 1be:	8e 93       	st	-X, r24
	
	TCNT1 = 0;	
 1c0:	ec e4       	ldi	r30, 0x4C	; 76
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	11 82       	std	Z+1, r1	; 0x01
 1c6:	10 82       	st	Z, r1
	PORTB = port;
 1c8:	e8 e3       	ldi	r30, 0x38	; 56
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 91 61 00 	lds	r24, 0x0061
 1d0:	80 83       	st	Z, r24
	_START_TCI;
 1d2:	a9 e5       	ldi	r26, 0x59	; 89
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e9 e5       	ldi	r30, 0x59	; 89
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 61       	ori	r24, 0x10	; 16
 1de:	8c 93       	st	X, r24
}
 1e0:	cf 91       	pop	r28
 1e2:	df 91       	pop	r29
 1e4:	08 95       	ret

000001e6 <main>:

int main(void) {
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	28 97       	sbiw	r28, 0x08	; 8
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART Receiver: On
	// USART Transmitter: On
	// USART Mode: Asynchronous
	// USART Baud Rate: 9600
	UCSRA=0x00;
 1fe:	eb e2       	ldi	r30, 0x2B	; 43
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	10 82       	st	Z, r1
    UCSRC = ( 1 << URSEL ) | ( 1 << UCSZ1 ) | ( 1 << UCSZ0 );
 204:	e0 e4       	ldi	r30, 0x40	; 64
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	86 e8       	ldi	r24, 0x86	; 134
 20a:	80 83       	st	Z, r24
  	UCSRB = ( 1 << TXEN ) | ( 1 <<RXEN );
 20c:	ea e2       	ldi	r30, 0x2A	; 42
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	88 e1       	ldi	r24, 0x18	; 24
 212:	80 83       	st	Z, r24
	UBRRH=0x00;
 214:	e0 e4       	ldi	r30, 0x40	; 64
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	10 82       	st	Z, r1
	UBRRL=0x33;
 21a:	e9 e2       	ldi	r30, 0x29	; 41
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	83 e3       	ldi	r24, 0x33	; 51
 220:	80 83       	st	Z, r24
	//*

	uart_putc('>');
 222:	8e e3       	ldi	r24, 0x3E	; 62
 224:	11 df       	rcall	.-478    	; 0x48 <uart_putc>
	//Init timer
	//OCR1A = 0x0028;  //0x0028 - 40uS

	OCR1A = 0x7d0;  //0x030C - 780uS
 226:	ea e4       	ldi	r30, 0x4A	; 74
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 ed       	ldi	r24, 0xD0	; 208
 22c:	97 e0       	ldi	r25, 0x07	; 7
 22e:	91 83       	std	Z+1, r25	; 0x01
 230:	80 83       	st	Z, r24
	//OCR1AH = 0x00;
	//***



	TCCR1A = 0;
 232:	ef e4       	ldi	r30, 0x4F	; 79
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	10 82       	st	Z, r1
	TCNT1 = 0;
 238:	ec e4       	ldi	r30, 0x4C	; 76
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	11 82       	std	Z+1, r1	; 0x01
 23e:	10 82       	st	Z, r1
	TCCR1B |= (1 << WGM12);
 240:	ae e4       	ldi	r26, 0x4E	; 78
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	ee e4       	ldi	r30, 0x4E	; 78
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	88 60       	ori	r24, 0x08	; 8
 24c:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS11);
 24e:	ae e4       	ldi	r26, 0x4E	; 78
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	ee e4       	ldi	r30, 0x4E	; 78
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	8c 93       	st	X, r24

	idx = 0;
 25c:	10 92 60 00 	sts	0x0060, r1


	//----------------------

	//INIT
	DDRB = 0xFF;
 260:	e7 e3       	ldi	r30, 0x37	; 55
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	80 83       	st	Z, r24
	DDRC = 0xFF;
 268:	e4 e3       	ldi	r30, 0x34	; 52
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	80 83       	st	Z, r24
	for(idx =0; idx < _SERVO_CNT; idx++){
 270:	10 92 60 00 	sts	0x0060, r1
 274:	57 c0       	rjmp	.+174    	; 0x324 <main+0x13e>
		int16_t addr = &eememSet;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	9a 83       	std	Y+2, r25	; 0x02
 27c:	89 83       	std	Y+1, r24	; 0x01
		addr += sizeof(servo_set_t)*idx;
 27e:	80 91 60 00 	lds	r24, 0x0060
 282:	88 2f       	mov	r24, r24
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	9c 01       	movw	r18, r24
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	82 0f       	add	r24, r18
 296:	93 1f       	adc	r25, r19
 298:	9a 83       	std	Y+2, r25	; 0x02
 29a:	89 83       	std	Y+1, r24	; 0x01
		eeprom_read_block ((void *)&tmpSet, addr, sizeof(servo_set_t));
 29c:	29 81       	ldd	r18, Y+1	; 0x01
 29e:	3a 81       	ldd	r19, Y+2	; 0x02
 2a0:	82 e6       	ldi	r24, 0x62	; 98
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	b9 01       	movw	r22, r18
 2a6:	44 e0       	ldi	r20, 0x04	; 4
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	2d d1       	rcall	.+602    	; 0x506 <__eerd_block_m8>
		servos[idx].idx = (1 << (idx));
 2ac:	80 91 60 00 	lds	r24, 0x0060
 2b0:	48 2f       	mov	r20, r24
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	80 91 60 00 	lds	r24, 0x0060
 2b8:	28 2f       	mov	r18, r24
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <main+0xe0>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	2a 95       	dec	r18
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <main+0xdc>
 2ca:	28 2f       	mov	r18, r24
 2cc:	ca 01       	movw	r24, r20
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	fc 01       	movw	r30, r24
 2d8:	ea 59       	subi	r30, 0x9A	; 154
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	20 83       	st	Z, r18
		servos[idx].counter = tmpSet.cntmin;
 2de:	80 91 60 00 	lds	r24, 0x0060
 2e2:	88 2f       	mov	r24, r24
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	20 91 62 00 	lds	r18, 0x0062
 2ea:	30 91 63 00 	lds	r19, 0x0063
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	fc 01       	movw	r30, r24
 2f8:	e9 59       	subi	r30, 0x99	; 153
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	31 83       	std	Z+1, r19	; 0x01
 2fe:	20 83       	st	Z, r18
		servos[idx].angle = -90;
 300:	80 91 60 00 	lds	r24, 0x0060
 304:	88 2f       	mov	r24, r24
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	fc 01       	movw	r30, r24
 312:	e7 59       	subi	r30, 0x97	; 151
 314:	ff 4f       	sbci	r31, 0xFF	; 255
 316:	86 ea       	ldi	r24, 0xA6	; 166
 318:	80 83       	st	Z, r24
	//----------------------

	//INIT
	DDRB = 0xFF;
	DDRC = 0xFF;
	for(idx =0; idx < _SERVO_CNT; idx++){
 31a:	80 91 60 00 	lds	r24, 0x0060
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 60 00 	sts	0x0060, r24
 324:	80 91 60 00 	lds	r24, 0x0060
 328:	88 30       	cpi	r24, 0x08	; 8
 32a:	08 f4       	brcc	.+2      	; 0x32e <main+0x148>
 32c:	a4 cf       	rjmp	.-184    	; 0x276 <main+0x90>
		eeprom_read_block ((void *)&tmpSet, addr, sizeof(servo_set_t));
		servos[idx].idx = (1 << (idx));
		servos[idx].counter = tmpSet.cntmin;
		servos[idx].angle = -90;
	}
	idx = 0;
 32e:	10 92 60 00 	sts	0x0060, r1

	timerStart();
 332:	fb de       	rcall	.-522    	; 0x12a <timerStart>
  	sei();     
 334:	78 94       	sei
	opt.received = 0;
 336:	80 91 86 00 	lds	r24, 0x0086
 33a:	8e 7f       	andi	r24, 0xFE	; 254
 33c:	80 93 86 00 	sts	0x0086, r24
	uint8_t bidx;
	int8_t angle;

	while(1){

		if ( UCSRA &_BV(RXC)   ){
 340:	eb e2       	ldi	r30, 0x2B	; 43
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	88 23       	and	r24, r24
 348:	6c f4       	brge	.+26     	; 0x364 <main+0x17e>
			ch = UDR;
 34a:	ec e2       	ldi	r30, 0x2C	; 44
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	80 93 87 00 	sts	0x0087, r24
			uart_putc(ch);
 354:	80 91 87 00 	lds	r24, 0x0087
 358:	77 de       	rcall	.-786    	; 0x48 <uart_putc>
			opt.received = 1;
 35a:	80 91 86 00 	lds	r24, 0x0086
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	80 93 86 00 	sts	0x0086, r24
		}

		if (opt.received == 1){
 364:	80 91 86 00 	lds	r24, 0x0086
 368:	81 70       	andi	r24, 0x01	; 1
 36a:	88 23       	and	r24, r24
 36c:	49 f3       	breq	.-46     	; 0x340 <main+0x15a>

			if ((ch >= '1') & (ch <= '8')){
 36e:	80 91 87 00 	lds	r24, 0x0087
 372:	18 86       	std	Y+8, r1	; 0x08
 374:	81 33       	cpi	r24, 0x31	; 49
 376:	10 f0       	brcs	.+4      	; 0x37c <main+0x196>
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	88 87       	std	Y+8, r24	; 0x08
 37c:	80 91 87 00 	lds	r24, 0x0087
 380:	1f 82       	std	Y+7, r1	; 0x07
 382:	89 33       	cpi	r24, 0x39	; 57
 384:	10 f4       	brcc	.+4      	; 0x38a <main+0x1a4>
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	9f 83       	std	Y+7, r25	; 0x07
 38a:	88 85       	ldd	r24, Y+8	; 0x08
 38c:	9f 81       	ldd	r25, Y+7	; 0x07
 38e:	89 23       	and	r24, r25
 390:	88 23       	and	r24, r24
 392:	21 f0       	breq	.+8      	; 0x39c <main+0x1b6>
				bidx = ch - '1';
 394:	80 91 87 00 	lds	r24, 0x0087
 398:	81 53       	subi	r24, 0x31	; 49
 39a:	8c 83       	std	Y+4, r24	; 0x04
				//uart_putc(ch);
			}
			if ((ch == '+')|(ch == '-')){
 39c:	80 91 87 00 	lds	r24, 0x0087
 3a0:	1e 82       	std	Y+6, r1	; 0x06
 3a2:	8b 32       	cpi	r24, 0x2B	; 43
 3a4:	11 f4       	brne	.+4      	; 0x3aa <main+0x1c4>
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	8e 83       	std	Y+6, r24	; 0x06
 3aa:	80 91 87 00 	lds	r24, 0x0087
 3ae:	1d 82       	std	Y+5, r1	; 0x05
 3b0:	8d 32       	cpi	r24, 0x2D	; 45
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <main+0x1d2>
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	9d 83       	std	Y+5, r25	; 0x05
 3b8:	8e 81       	ldd	r24, Y+6	; 0x06
 3ba:	9d 81       	ldd	r25, Y+5	; 0x05
 3bc:	89 2b       	or	r24, r25
 3be:	88 23       	and	r24, r24
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <main+0x1de>
 3c2:	53 c0       	rjmp	.+166    	; 0x46a <__stack+0xb>

				if (ch == '+'){
 3c4:	80 91 87 00 	lds	r24, 0x0087
 3c8:	8b 32       	cpi	r24, 0x2B	; 43
 3ca:	a1 f4       	brne	.+40     	; 0x3f4 <main+0x20e>

					angle = servos[bidx].angle;
 3cc:	8c 81       	ldd	r24, Y+4	; 0x04
 3ce:	88 2f       	mov	r24, r24
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	fc 01       	movw	r30, r24
 3dc:	e7 59       	subi	r30, 0x97	; 151
 3de:	ff 4f       	sbci	r31, 0xFF	; 255
 3e0:	80 81       	ld	r24, Z
 3e2:	8b 83       	std	Y+3, r24	; 0x03
					angle += 15;
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	81 5f       	subi	r24, 0xF1	; 241
 3e8:	8b 83       	std	Y+3, r24	; 0x03
					if (angle > +90) angle = +90;
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	8b 35       	cpi	r24, 0x5B	; 91
 3ee:	14 f0       	brlt	.+4      	; 0x3f4 <main+0x20e>
 3f0:	8a e5       	ldi	r24, 0x5A	; 90
 3f2:	8b 83       	std	Y+3, r24	; 0x03
				}
				if (ch == '-'){
 3f4:	80 91 87 00 	lds	r24, 0x0087
 3f8:	8d 32       	cpi	r24, 0x2D	; 45
 3fa:	a1 f4       	brne	.+40     	; 0x424 <main+0x23e>

					angle = servos[bidx].angle;
 3fc:	8c 81       	ldd	r24, Y+4	; 0x04
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	fc 01       	movw	r30, r24
 40c:	e7 59       	subi	r30, 0x97	; 151
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	80 81       	ld	r24, Z
 412:	8b 83       	std	Y+3, r24	; 0x03
					angle -= 15;
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	8f 50       	subi	r24, 0x0F	; 15
 418:	8b 83       	std	Y+3, r24	; 0x03
					if (angle < -90) angle = -90;
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	86 3a       	cpi	r24, 0xA6	; 166
 41e:	14 f4       	brge	.+4      	; 0x424 <main+0x23e>
 420:	86 ea       	ldi	r24, 0xA6	; 166
 422:	8b 83       	std	Y+3, r24	; 0x03
				}
				servos[bidx].counter = angle2counter(bidx, angle);
 424:	8c 81       	ldd	r24, Y+4	; 0x04
 426:	08 2f       	mov	r16, r24
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	8c 81       	ldd	r24, Y+4	; 0x04
 42c:	6b 81       	ldd	r22, Y+3	; 0x03
 42e:	23 de       	rcall	.-954    	; 0x76 <angle2counter>
 430:	9c 01       	movw	r18, r24
 432:	c8 01       	movw	r24, r16
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	fc 01       	movw	r30, r24
 43e:	e9 59       	subi	r30, 0x99	; 153
 440:	ff 4f       	sbci	r31, 0xFF	; 255
 442:	31 83       	std	Z+1, r19	; 0x01
 444:	20 83       	st	Z, r18
				servos[bidx].angle = angle;
 446:	8c 81       	ldd	r24, Y+4	; 0x04
 448:	88 2f       	mov	r24, r24
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	fc 01       	movw	r30, r24
 456:	e7 59       	subi	r30, 0x97	; 151
 458:	ff 4f       	sbci	r31, 0xFF	; 255
 45a:	8b 81       	ldd	r24, Y+3	; 0x03
 45c:	80 83       	st	Z, r24
				//uart_putc(ch);
				uart_putc(13);
 45e:	8d e0       	ldi	r24, 0x0D	; 13
 460:	f3 dd       	rcall	.-1050   	; 0x48 <uart_putc>
				uart_putc(10);
 462:	8a e0       	ldi	r24, 0x0A	; 10
 464:	f1 dd       	rcall	.-1054   	; 0x48 <uart_putc>
				uart_putc('>');
 466:	8e e3       	ldi	r24, 0x3E	; 62
 468:	ef dd       	rcall	.-1058   	; 0x48 <uart_putc>
			}
			opt.received = 0;
 46a:	80 91 86 00 	lds	r24, 0x0086
 46e:	8e 7f       	andi	r24, 0xFE	; 254
 470:	80 93 86 00 	sts	0x0086, r24
 474:	65 cf       	rjmp	.-310    	; 0x340 <main+0x15a>

00000476 <__vector_6>:
}



ISR(TIMER1_COMPA_vect)
{
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	2f 93       	push	r18
 482:	3f 93       	push	r19
 484:	4f 93       	push	r20
 486:	5f 93       	push	r21
 488:	6f 93       	push	r22
 48a:	7f 93       	push	r23
 48c:	8f 93       	push	r24
 48e:	9f 93       	push	r25
 490:	af 93       	push	r26
 492:	bf 93       	push	r27
 494:	ef 93       	push	r30
 496:	ff 93       	push	r31
 498:	df 93       	push	r29
 49a:	cf 93       	push	r28
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
	timerStart();
 4a0:	44 de       	rcall	.-888    	; 0x12a <timerStart>
	PORTC = 1 & idx;
 4a2:	e5 e3       	ldi	r30, 0x35	; 53
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 91 60 00 	lds	r24, 0x0060
 4aa:	81 70       	andi	r24, 0x01	; 1
 4ac:	80 83       	st	Z, r24
	PORTB = port;
 4ae:	e8 e3       	ldi	r30, 0x38	; 56
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 91 61 00 	lds	r24, 0x0061
 4b6:	80 83       	st	Z, r24
}
 4b8:	cf 91       	pop	r28
 4ba:	df 91       	pop	r29
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	bf 91       	pop	r27
 4c2:	af 91       	pop	r26
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	7f 91       	pop	r23
 4ca:	6f 91       	pop	r22
 4cc:	5f 91       	pop	r21
 4ce:	4f 91       	pop	r20
 4d0:	3f 91       	pop	r19
 4d2:	2f 91       	pop	r18
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <__udivmodhi4>:
 4de:	aa 1b       	sub	r26, r26
 4e0:	bb 1b       	sub	r27, r27
 4e2:	51 e1       	ldi	r21, 0x11	; 17
 4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <__udivmodhi4_ep>

000004e6 <__udivmodhi4_loop>:
 4e6:	aa 1f       	adc	r26, r26
 4e8:	bb 1f       	adc	r27, r27
 4ea:	a6 17       	cp	r26, r22
 4ec:	b7 07       	cpc	r27, r23
 4ee:	10 f0       	brcs	.+4      	; 0x4f4 <__udivmodhi4_ep>
 4f0:	a6 1b       	sub	r26, r22
 4f2:	b7 0b       	sbc	r27, r23

000004f4 <__udivmodhi4_ep>:
 4f4:	88 1f       	adc	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	5a 95       	dec	r21
 4fa:	a9 f7       	brne	.-22     	; 0x4e6 <__udivmodhi4_loop>
 4fc:	80 95       	com	r24
 4fe:	90 95       	com	r25
 500:	bc 01       	movw	r22, r24
 502:	cd 01       	movw	r24, r26
 504:	08 95       	ret

00000506 <__eerd_block_m8>:
 506:	dc 01       	movw	r26, r24
 508:	cb 01       	movw	r24, r22

0000050a <__eerd_blraw_m8>:
 50a:	fc 01       	movw	r30, r24
 50c:	e1 99       	sbic	0x1c, 1	; 28
 50e:	fe cf       	rjmp	.-4      	; 0x50c <__eerd_blraw_m8+0x2>
 510:	06 c0       	rjmp	.+12     	; 0x51e <__eerd_blraw_m8+0x14>
 512:	ff bb       	out	0x1f, r31	; 31
 514:	ee bb       	out	0x1e, r30	; 30
 516:	e0 9a       	sbi	0x1c, 0	; 28
 518:	31 96       	adiw	r30, 0x01	; 1
 51a:	0d b2       	in	r0, 0x1d	; 29
 51c:	0d 92       	st	X+, r0
 51e:	41 50       	subi	r20, 0x01	; 1
 520:	50 40       	sbci	r21, 0x00	; 0
 522:	b8 f7       	brcc	.-18     	; 0x512 <__eerd_blraw_m8+0x8>
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
